clear all
close all
clc

disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')
disp('%%    [Robótica - 23/10/2018 ~ 11/11/2018] LABWORK#2 - PROBLEMA 1    %%')
disp('%%                                                                   %%')
disp('%%                   Frederico Vaz, nº 2011283029                    %%')
disp('%%                   Paulo Almeida, nº 2010128473                    %%')
disp('%%                                                                   %%')
disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')
disp(' ')

%% Robô 3-DOF: L1 = 4; L2 = 3 e L3 = 2

syms theta1 theta2 theta3

% a) Matriz dos parâmetros de Denavith-Hartenberg: PJ_DH

% Cumprimentos dos elos
L1 = 4; L2 = 3; L3 = 2;
% Junta Rotacional ou Prismática
R = 1; P = 0;

%          thetai   di    ai   alfai  offseti  jointtypei       
PJ_DH = [  theta1    0    L1       0        0           R;   % Junta Rotacional
           theta2    0    L2       0        0           R;   % Junta Rotacional
           theta3    0     0    pi/2     pi/2           R;   % Junta Rotacional  
                0   L3     0    pi/2     pi/2           R ]; % Gripper Fixo


% A cinemática directa até ao Gripper
[ oTg, Ti ] = direct_kinematics(PJ_DH);  


oTg = simplify(oTg);
Ti = simplify(Ti);


% Criar Links Juntas Rotacionais -> o theta é variável
for i=1:4
    L(i) = Link('d',eval(PJ_DH(i,2)), 'a', eval(PJ_DH(i,3)), ...
           'alpha', eval(PJ_DH(i,4)), 'offset', eval(PJ_DH(i,5)));
end

robot = SerialLink(L, 'name', 'Robô Planar 3-DOF RRR');



%% b) Matrizes de Cinemática Directa de 0 A 2 e 0 A H;  c) Confirmação

% 3 casos de valores nas juntas para o Robô Planar 3-DOF - Gripper é fixo
q = [ deg2rad(0)  deg2rad(0)  deg2rad(0); 
      deg2rad(10) deg2rad(20) deg2rad(30);
      deg2rad(90) deg2rad(90) deg2rad(90) ];
  
% i) ii) iii)
for i=1:3
    
    T0_1 = eval(subs(Ti(:,:,1), q(i,1))); 
    T1_2 = eval(subs(Ti(:,:,2), q(i,2))); 
    T2_I = eval(subs(Ti(:,:,3), q(i,3))); 
    TI_H = Ti(:,:,4);
    
    A0_2(:,:,i) = T0_1 * T1_2;
    A0_H(:,:,i) = T0_1 * T1_2 * T2_I * TI_H;
    
    
    % c) Confirmação das Matrizes usando a toolbox Robotics
    T02(:,:,i) = robot.fkine([q(1,1:2) 0 0]);
    T0H(:,:,i) = robot.fkine([q(1,1:2) 0 0]);
    
end


% %% d) e) Solução da Cinemática Inversa 
% disp('d) e) Soluçãoo de Cinemática Inversa ')
% disp(' ')
% 
% disp('Matriz simbólica do Mundo ao Gripper: O T G')
% disp(' ')
% disp(oTg)
% 
% disp('Matriz simbólica do Mundo ao Braço: O T 2')
% disp(' ')
% T02_SYMS = Ti(:,:,1)*Ti(:,:,2);
% disp(simplify(T02_SYMS))
% 
% 
% disp('--------------------------------------------------------------------')
% 
% % Conjuntos das juntas para cada caso da alínea anterior:
% disp(' ')
% disp('Conjunto de soluções: ')
% for i=1:3
%     [q(i,:), q_(i,:)] = inverse_kinematics_ex2(A0H(:,:,i));
%     
%     disp(' ')
%     disp('Caso positivo')
%     disp(['q' num2str(i) ' = [ ' num2str(rad2deg(q(i,1))) 'Âº ' num2str(rad2deg(q(i,2))) 'Âº ' num2str(rad2deg(q(i,3))) 'Âº ]'])
%     disp(' ')
%     
%     disp('Caso negativo:')
%     disp(['q' num2str(i) ' = [ ' num2str(rad2deg(q_(i,1))) 'Âº ' num2str(rad2deg(q_(i,2))) 'Âº ' num2str(rad2deg(q_(i,3))) 'Âº ]'])
%     disp(' ')
% 
% 
% end
% disp('--------------------------------------------------------------------')
% 
% disp('Confirmação usando a toolbox Robotics:')
% for i=1:3
%    % Caso positivo
%    A0H_p = robot.fkine([q(i,:) 0]); 
%    % Caso negativo
%    A0H_n = robot.fkine([q(i,:) 0]); 
%    
%    if(1)
%         disp(['A matriz A0H c/ q = q', num2str(i), ' estÃ¡ correcta!'])
%    else
%         disp(['A matriz A0H c/ q = q', num2str(i), ' nÃ£o estÃ¡ correcta!'])
%    end
%    
% end
% 
% disp('--------------------------------------------------------------------')
% %% Estamos aqui com um erro!
% % ConfirmaÃ§Ã£o da CinemÃ¡tica Inversa pela toolbox Robotics
% disp(' ')
% disp('CinemÃ¡tica Inversa pela toolbox Robotics:')
% 
% for i=1:3
%    
%     q__(i,:) = robot.ikine(A0H(:,:,i), [0 0 0 0]) % [1 1 0 1 1 0]
%     disp('')
%     disp(['q' num2str(i) ' = [ ' num2str(rad2deg(q__(i,1))) 'Âº ' num2str(rad2deg(q__(i,2))) 'Âº ' num2str(rad2deg(q__(i,3))) 'Âº ]'])
%     disp(' ')
% end
% disp(' ')
% disp('########################################################################')



%% MENU ("main")

% Variaveis MENU
select = 0;
STOP = 7;

while(select ~= STOP)
    
    select = menu('Seleccione a acao a realizar:', 'a) Matriz PJ_DH e O T G',...
                                                   'b) c) q = [ 0º  0º  0º]',...
                                                   'b) c) q = [10º 20º 30º]',...
                                                   'b) c) q = [90º 90º 90º]',...
                                                   'Robot q = [ 0º  0º  0º]',...
                                                   'Robot q = [10º 20º 30º]',...
                                                   'Robot q = [90º 90º 90º]',...
                                                   'Quit');  
                                                
    % a) Matriz dos parametros de Denavith-Hartenberg: PJ_DH
    if select == 1  
        disp('______________________________________________________________________')
        disp(' ')
        disp('a) Matriz dos parâmetros de Denavith-Hartenberg: PJ_DH')
        disp('______________________________________________________________________')
        disp(' ')
        robot.display
        disp(' ')
        disp('______________________________________________________________________')
        disp(' ')
        disp('a) Cinemática Directa: O T G')
        disp('______________________________________________________________________')
        disp(' ')
        disp(oTg)
        disp(' ')
        disp('______________________________________________________________________')
    disp('#######################################################################')   
    end  
    
    % b) Matrizes de Cinemática Directa de 0 A 2 e 0 A H
    if select == 2 || select == 3 || select == 4
        
        i = select - 1;
        
        disp(' ')
        disp(['q' num2str(i) ' = [ ' num2str(rad2deg(q(i,1))) 'º ' num2str(rad2deg(q(i,2))) 'º ' num2str(rad2deg(q(i,3))) 'º ]'])
        disp(' ')
        disp('A02:')
        disp(' ')
        disp(A0_2(:,:,i))
        disp(' ')
        disp('c) Confirmação usando a toolbox Robotics:')
        disp(' ')
        disp(T02(:,:,i))
        disp(' ')
        disp('A0H:')
        disp(' ')
        disp(A0_H(:,:,i))
        disp(' ')
        disp('c) Confirmação usando a toolbox Robotics:')
        disp(' ')
        disp(T0H(:,:,i))
        disp(' ')
        disp('______________________________________________________________________')   
    end

    % Representação gráfica dos Robôs
    if select == 5 || select == 6 || select == 7
        
        i = select - 4;
        
        robot.plot(q(i,:), 'workspace', [-10 10 -2 5 -2 2], 'reach',1);
         
    end
    
end













